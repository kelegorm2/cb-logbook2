// prisma/schema.prisma
datasource db {
  provider  = "mysql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  logs                  Log[]
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  isUserallowed         Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Project {
  id          String @id @default(uuid())
  name        String @db.VarChar(255)
  description String @db.VarChar(255)
  logs        Log[]
}

model Log {
  id          String   @id @default(uuid())
  description String   @db.Text
  created_at  DateTime @default(now()) @db.DateTime(6)
  updated_at  DateTime @updatedAt @db.DateTime(6)
  tags        Tag[]
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  project     Project  @relation(fields: [projectId], references: [id])
  projectId   String
}

model Tag {
  id   String @id @default(uuid())
  name String @unique @db.VarChar(255)
  logs Log[]
}
